// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/mitsuha/stork/repository/model"
)

func newSongs(db *gorm.DB, opts ...gen.DOOption) songs {
	_songs := songs{}

	_songs.songsDo.UseDB(db, opts...)
	_songs.songsDo.UseModel(&model.Songs{})

	tableName := _songs.songsDo.TableName()
	_songs.ALL = field.NewAsterisk(tableName)
	_songs.ID = field.NewString(tableName, "id")
	_songs.AlbumID = field.NewInt(tableName, "album_id")
	_songs.Title = field.NewString(tableName, "title")
	_songs.Length = field.NewFloat64(tableName, "length")
	_songs.Track = field.NewField(tableName, "track")
	_songs.Disc = field.NewInt(tableName, "disc")
	_songs.Lyrics = field.NewString(tableName, "lyrics")
	_songs.Path = field.NewString(tableName, "path")
	_songs.Mtime = field.NewInt(tableName, "mtime")
	_songs.CreatedAt = field.NewTime(tableName, "created_at")
	_songs.UpdatedAt = field.NewTime(tableName, "updated_at")
	_songs.ArtistID = field.NewField(tableName, "artist_id")
	_songs.Year = field.NewString(tableName, "year")
	_songs.Genre = field.NewString(tableName, "genre")

	_songs.fillFieldMap()

	return _songs
}

type songs struct {
	songsDo songsDo

	ALL       field.Asterisk
	ID        field.String
	AlbumID   field.Int
	Title     field.String
	Length    field.Float64
	Track     field.Field
	Disc      field.Int
	Lyrics    field.String
	Path      field.String
	Mtime     field.Int
	CreatedAt field.Time
	UpdatedAt field.Time
	ArtistID  field.Field
	Year      field.String
	Genre     field.String

	fieldMap map[string]field.Expr
}

func (s songs) Table(newTableName string) *songs {
	s.songsDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s songs) As(alias string) *songs {
	s.songsDo.DO = *(s.songsDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *songs) updateTableName(table string) *songs {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.AlbumID = field.NewInt(table, "album_id")
	s.Title = field.NewString(table, "title")
	s.Length = field.NewFloat64(table, "length")
	s.Track = field.NewField(table, "track")
	s.Disc = field.NewInt(table, "disc")
	s.Lyrics = field.NewString(table, "lyrics")
	s.Path = field.NewString(table, "path")
	s.Mtime = field.NewInt(table, "mtime")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.ArtistID = field.NewField(table, "artist_id")
	s.Year = field.NewString(table, "year")
	s.Genre = field.NewString(table, "genre")

	s.fillFieldMap()

	return s
}

func (s *songs) WithContext(ctx context.Context) ISongsDo { return s.songsDo.WithContext(ctx) }

func (s songs) TableName() string { return s.songsDo.TableName() }

func (s songs) Alias() string { return s.songsDo.Alias() }

func (s songs) Columns(cols ...field.Expr) gen.Columns { return s.songsDo.Columns(cols...) }

func (s *songs) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *songs) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["album_id"] = s.AlbumID
	s.fieldMap["title"] = s.Title
	s.fieldMap["length"] = s.Length
	s.fieldMap["track"] = s.Track
	s.fieldMap["disc"] = s.Disc
	s.fieldMap["lyrics"] = s.Lyrics
	s.fieldMap["path"] = s.Path
	s.fieldMap["mtime"] = s.Mtime
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["artist_id"] = s.ArtistID
	s.fieldMap["year"] = s.Year
	s.fieldMap["genre"] = s.Genre
}

func (s songs) clone(db *gorm.DB) songs {
	s.songsDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s songs) replaceDB(db *gorm.DB) songs {
	s.songsDo.ReplaceDB(db)
	return s
}

type songsDo struct{ gen.DO }

type ISongsDo interface {
	gen.SubQuery
	Debug() ISongsDo
	WithContext(ctx context.Context) ISongsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISongsDo
	WriteDB() ISongsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISongsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISongsDo
	Not(conds ...gen.Condition) ISongsDo
	Or(conds ...gen.Condition) ISongsDo
	Select(conds ...field.Expr) ISongsDo
	Where(conds ...gen.Condition) ISongsDo
	Order(conds ...field.Expr) ISongsDo
	Distinct(cols ...field.Expr) ISongsDo
	Omit(cols ...field.Expr) ISongsDo
	Join(table schema.Tabler, on ...field.Expr) ISongsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISongsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISongsDo
	Group(cols ...field.Expr) ISongsDo
	Having(conds ...gen.Condition) ISongsDo
	Limit(limit int) ISongsDo
	Offset(offset int) ISongsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISongsDo
	Unscoped() ISongsDo
	Create(values ...*model.Songs) error
	CreateInBatches(values []*model.Songs, batchSize int) error
	Save(values ...*model.Songs) error
	First() (*model.Songs, error)
	Take() (*model.Songs, error)
	Last() (*model.Songs, error)
	Find() ([]*model.Songs, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Songs, err error)
	FindInBatches(result *[]*model.Songs, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Songs) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISongsDo
	Assign(attrs ...field.AssignExpr) ISongsDo
	Joins(fields ...field.RelationField) ISongsDo
	Preload(fields ...field.RelationField) ISongsDo
	FirstOrInit() (*model.Songs, error)
	FirstOrCreate() (*model.Songs, error)
	FindByPage(offset int, limit int) (result []*model.Songs, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISongsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindAll() (result []*model.Songs, err error)
	FindByID(id int) (result *model.Songs, err error)
	IdIn(ids []string) (result []*model.Songs, err error)
}

// FindAll SELECT * FROM @@table
func (s songsDo) FindAll() (result []*model.Songs, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM songs ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// FindByID SELECT * FROM @@table WHERE id = @id
func (s songsDo) FindByID(id int) (result *model.Songs, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM songs WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// IdIn SELECT * FROM @@table WHERE id IN (@ids)
func (s songsDo) IdIn(ids []string) (result []*model.Songs, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, ids)
	generateSQL.WriteString("SELECT * FROM songs WHERE id IN (?) ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s songsDo) Debug() ISongsDo {
	return s.withDO(s.DO.Debug())
}

func (s songsDo) WithContext(ctx context.Context) ISongsDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s songsDo) ReadDB() ISongsDo {
	return s.Clauses(dbresolver.Read)
}

func (s songsDo) WriteDB() ISongsDo {
	return s.Clauses(dbresolver.Write)
}

func (s songsDo) Session(config *gorm.Session) ISongsDo {
	return s.withDO(s.DO.Session(config))
}

func (s songsDo) Clauses(conds ...clause.Expression) ISongsDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s songsDo) Returning(value interface{}, columns ...string) ISongsDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s songsDo) Not(conds ...gen.Condition) ISongsDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s songsDo) Or(conds ...gen.Condition) ISongsDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s songsDo) Select(conds ...field.Expr) ISongsDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s songsDo) Where(conds ...gen.Condition) ISongsDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s songsDo) Order(conds ...field.Expr) ISongsDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s songsDo) Distinct(cols ...field.Expr) ISongsDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s songsDo) Omit(cols ...field.Expr) ISongsDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s songsDo) Join(table schema.Tabler, on ...field.Expr) ISongsDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s songsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISongsDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s songsDo) RightJoin(table schema.Tabler, on ...field.Expr) ISongsDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s songsDo) Group(cols ...field.Expr) ISongsDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s songsDo) Having(conds ...gen.Condition) ISongsDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s songsDo) Limit(limit int) ISongsDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s songsDo) Offset(offset int) ISongsDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s songsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISongsDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s songsDo) Unscoped() ISongsDo {
	return s.withDO(s.DO.Unscoped())
}

func (s songsDo) Create(values ...*model.Songs) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s songsDo) CreateInBatches(values []*model.Songs, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s songsDo) Save(values ...*model.Songs) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s songsDo) First() (*model.Songs, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songs), nil
	}
}

func (s songsDo) Take() (*model.Songs, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songs), nil
	}
}

func (s songsDo) Last() (*model.Songs, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songs), nil
	}
}

func (s songsDo) Find() ([]*model.Songs, error) {
	result, err := s.DO.Find()
	return result.([]*model.Songs), err
}

func (s songsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Songs, err error) {
	buf := make([]*model.Songs, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s songsDo) FindInBatches(result *[]*model.Songs, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s songsDo) Attrs(attrs ...field.AssignExpr) ISongsDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s songsDo) Assign(attrs ...field.AssignExpr) ISongsDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s songsDo) Joins(fields ...field.RelationField) ISongsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s songsDo) Preload(fields ...field.RelationField) ISongsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s songsDo) FirstOrInit() (*model.Songs, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songs), nil
	}
}

func (s songsDo) FirstOrCreate() (*model.Songs, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songs), nil
	}
}

func (s songsDo) FindByPage(offset int, limit int) (result []*model.Songs, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s songsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s songsDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s songsDo) Delete(models ...*model.Songs) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *songsDo) withDO(do gen.Dao) *songsDo {
	s.DO = *do.(*gen.DO)
	return s
}
