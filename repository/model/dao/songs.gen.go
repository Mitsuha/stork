// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/mitsuha/stork/repository/model"
)

func newSongs(db *gorm.DB, opts ...gen.DOOption) songs {
	_songs := songs{}

	_songs.songsDo.UseDB(db, opts...)
	_songs.songsDo.UseModel(&model.Songs{})

	tableName := _songs.songsDo.TableName()
	_songs.ALL = field.NewAsterisk(tableName)
	_songs.ID = field.NewString(tableName, "id")
	_songs.AlbumID = field.NewInt(tableName, "album_id")
	_songs.Title = field.NewString(tableName, "title")
	_songs.Length = field.NewFloat64(tableName, "length")
	_songs.Track = field.NewInt(tableName, "track")
	_songs.Disc = field.NewInt(tableName, "disc")
	_songs.Lyrics = field.NewString(tableName, "lyrics")
	_songs.Path = field.NewString(tableName, "path")
	_songs.Mtime = field.NewInt(tableName, "mtime")
	_songs.CreatedAt = field.NewTime(tableName, "created_at")
	_songs.UpdatedAt = field.NewTime(tableName, "updated_at")
	_songs.ArtistID = field.NewInt(tableName, "artist_id")
	_songs.Year = field.NewInt(tableName, "year")
	_songs.Genre = field.NewString(tableName, "genre")
	_songs.Interaction = songsHasOneInteraction{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Interaction", "model.Interaction"),
	}

	_songs.Album = songsBelongsToAlbum{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Album", "model.Album"),
		Artist: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Album.Artist", "model.Artist"),
		},
	}

	_songs.Artist = songsBelongsToArtist{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Artist", "model.Artist"),
	}

	_songs.fillFieldMap()

	return _songs
}

type songs struct {
	songsDo songsDo

	ALL         field.Asterisk
	ID          field.String
	AlbumID     field.Int
	Title       field.String
	Length      field.Float64
	Track       field.Int
	Disc        field.Int
	Lyrics      field.String
	Path        field.String
	Mtime       field.Int
	CreatedAt   field.Time
	UpdatedAt   field.Time
	ArtistID    field.Int
	Year        field.Int
	Genre       field.String
	Interaction songsHasOneInteraction

	Album songsBelongsToAlbum

	Artist songsBelongsToArtist

	fieldMap map[string]field.Expr
}

func (s songs) Table(newTableName string) *songs {
	s.songsDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s songs) As(alias string) *songs {
	s.songsDo.DO = *(s.songsDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *songs) updateTableName(table string) *songs {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.AlbumID = field.NewInt(table, "album_id")
	s.Title = field.NewString(table, "title")
	s.Length = field.NewFloat64(table, "length")
	s.Track = field.NewInt(table, "track")
	s.Disc = field.NewInt(table, "disc")
	s.Lyrics = field.NewString(table, "lyrics")
	s.Path = field.NewString(table, "path")
	s.Mtime = field.NewInt(table, "mtime")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.ArtistID = field.NewInt(table, "artist_id")
	s.Year = field.NewInt(table, "year")
	s.Genre = field.NewString(table, "genre")

	s.fillFieldMap()

	return s
}

func (s *songs) WithContext(ctx context.Context) ISongsDo { return s.songsDo.WithContext(ctx) }

func (s songs) TableName() string { return s.songsDo.TableName() }

func (s songs) Alias() string { return s.songsDo.Alias() }

func (s songs) Columns(cols ...field.Expr) gen.Columns { return s.songsDo.Columns(cols...) }

func (s *songs) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *songs) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 17)
	s.fieldMap["id"] = s.ID
	s.fieldMap["album_id"] = s.AlbumID
	s.fieldMap["title"] = s.Title
	s.fieldMap["length"] = s.Length
	s.fieldMap["track"] = s.Track
	s.fieldMap["disc"] = s.Disc
	s.fieldMap["lyrics"] = s.Lyrics
	s.fieldMap["path"] = s.Path
	s.fieldMap["mtime"] = s.Mtime
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["artist_id"] = s.ArtistID
	s.fieldMap["year"] = s.Year
	s.fieldMap["genre"] = s.Genre

}

func (s songs) clone(db *gorm.DB) songs {
	s.songsDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s songs) replaceDB(db *gorm.DB) songs {
	s.songsDo.ReplaceDB(db)
	return s
}

type songsHasOneInteraction struct {
	db *gorm.DB

	field.RelationField
}

func (a songsHasOneInteraction) Where(conds ...field.Expr) *songsHasOneInteraction {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a songsHasOneInteraction) WithContext(ctx context.Context) *songsHasOneInteraction {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a songsHasOneInteraction) Session(session *gorm.Session) *songsHasOneInteraction {
	a.db = a.db.Session(session)
	return &a
}

func (a songsHasOneInteraction) Model(m *model.Songs) *songsHasOneInteractionTx {
	return &songsHasOneInteractionTx{a.db.Model(m).Association(a.Name())}
}

type songsHasOneInteractionTx struct{ tx *gorm.Association }

func (a songsHasOneInteractionTx) Find() (result *model.Interaction, err error) {
	return result, a.tx.Find(&result)
}

func (a songsHasOneInteractionTx) Append(values ...*model.Interaction) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a songsHasOneInteractionTx) Replace(values ...*model.Interaction) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a songsHasOneInteractionTx) Delete(values ...*model.Interaction) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a songsHasOneInteractionTx) Clear() error {
	return a.tx.Clear()
}

func (a songsHasOneInteractionTx) Count() int64 {
	return a.tx.Count()
}

type songsBelongsToAlbum struct {
	db *gorm.DB

	field.RelationField

	Artist struct {
		field.RelationField
	}
}

func (a songsBelongsToAlbum) Where(conds ...field.Expr) *songsBelongsToAlbum {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a songsBelongsToAlbum) WithContext(ctx context.Context) *songsBelongsToAlbum {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a songsBelongsToAlbum) Session(session *gorm.Session) *songsBelongsToAlbum {
	a.db = a.db.Session(session)
	return &a
}

func (a songsBelongsToAlbum) Model(m *model.Songs) *songsBelongsToAlbumTx {
	return &songsBelongsToAlbumTx{a.db.Model(m).Association(a.Name())}
}

type songsBelongsToAlbumTx struct{ tx *gorm.Association }

func (a songsBelongsToAlbumTx) Find() (result *model.Album, err error) {
	return result, a.tx.Find(&result)
}

func (a songsBelongsToAlbumTx) Append(values ...*model.Album) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a songsBelongsToAlbumTx) Replace(values ...*model.Album) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a songsBelongsToAlbumTx) Delete(values ...*model.Album) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a songsBelongsToAlbumTx) Clear() error {
	return a.tx.Clear()
}

func (a songsBelongsToAlbumTx) Count() int64 {
	return a.tx.Count()
}

type songsBelongsToArtist struct {
	db *gorm.DB

	field.RelationField
}

func (a songsBelongsToArtist) Where(conds ...field.Expr) *songsBelongsToArtist {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a songsBelongsToArtist) WithContext(ctx context.Context) *songsBelongsToArtist {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a songsBelongsToArtist) Session(session *gorm.Session) *songsBelongsToArtist {
	a.db = a.db.Session(session)
	return &a
}

func (a songsBelongsToArtist) Model(m *model.Songs) *songsBelongsToArtistTx {
	return &songsBelongsToArtistTx{a.db.Model(m).Association(a.Name())}
}

type songsBelongsToArtistTx struct{ tx *gorm.Association }

func (a songsBelongsToArtistTx) Find() (result *model.Artist, err error) {
	return result, a.tx.Find(&result)
}

func (a songsBelongsToArtistTx) Append(values ...*model.Artist) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a songsBelongsToArtistTx) Replace(values ...*model.Artist) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a songsBelongsToArtistTx) Delete(values ...*model.Artist) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a songsBelongsToArtistTx) Clear() error {
	return a.tx.Clear()
}

func (a songsBelongsToArtistTx) Count() int64 {
	return a.tx.Count()
}

type songsDo struct{ gen.DO }

type ISongsDo interface {
	gen.SubQuery
	Debug() ISongsDo
	WithContext(ctx context.Context) ISongsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISongsDo
	WriteDB() ISongsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISongsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISongsDo
	Not(conds ...gen.Condition) ISongsDo
	Or(conds ...gen.Condition) ISongsDo
	Select(conds ...field.Expr) ISongsDo
	Where(conds ...gen.Condition) ISongsDo
	Order(conds ...field.Expr) ISongsDo
	Distinct(cols ...field.Expr) ISongsDo
	Omit(cols ...field.Expr) ISongsDo
	Join(table schema.Tabler, on ...field.Expr) ISongsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISongsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISongsDo
	Group(cols ...field.Expr) ISongsDo
	Having(conds ...gen.Condition) ISongsDo
	Limit(limit int) ISongsDo
	Offset(offset int) ISongsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISongsDo
	Unscoped() ISongsDo
	Create(values ...*model.Songs) error
	CreateInBatches(values []*model.Songs, batchSize int) error
	Save(values ...*model.Songs) error
	First() (*model.Songs, error)
	Take() (*model.Songs, error)
	Last() (*model.Songs, error)
	Find() ([]*model.Songs, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Songs, err error)
	FindInBatches(result *[]*model.Songs, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Songs) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISongsDo
	Assign(attrs ...field.AssignExpr) ISongsDo
	Joins(fields ...field.RelationField) ISongsDo
	Preload(fields ...field.RelationField) ISongsDo
	FirstOrInit() (*model.Songs, error)
	FirstOrCreate() (*model.Songs, error)
	FindByPage(offset int, limit int) (result []*model.Songs, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISongsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindAll() (result []*model.Songs, err error)
	FindByID(id int) (result *model.Songs, err error)
	IdIn(ids []string) (result []*model.Songs, err error)
	CountAndLength() (result *model.CountAndLength, err error)
	MostPlayed(uid int, limit int) (result []*model.Songs, err error)
	RecentlyPlayed(uid int, limit int) (result []*model.Songs, err error)
	RecentlyAdded(uid int, limit int) (result []*model.Songs, err error)
}

// FindAll SELECT * FROM @@table
func (s songsDo) FindAll() (result []*model.Songs, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM songs ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// FindByID SELECT * FROM @@table WHERE id = @id
func (s songsDo) FindByID(id int) (result *model.Songs, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM songs WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// IdIn SELECT * FROM @@table WHERE id IN (@ids)
func (s songsDo) IdIn(ids []string) (result []*model.Songs, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, ids)
	generateSQL.WriteString("SELECT * FROM songs WHERE id IN (?) ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// CountAndLength SELECT COUNT(*) AS count, SUM(length) AS length FROM @@table
func (s songsDo) CountAndLength() (result *model.CountAndLength, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT COUNT(*) AS count, SUM(length) AS length FROM songs ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// MostPlayed SELECT @@table .*, albums.name, artists.name, interactions.liked, interactions.play_count
// FROM @@table
// LEFT JOIN interactions ON interactions.song_id = @@table .id AND interactions.user_id = @uid
// JOIN albums ON @@table .album_id = albums.id
// JOIN artists ON @@table .artist_id = artists.id
// WHERE interactions.play_count > 0
// ORDER BY interactions.play_count DESC
// LIMIT @limit
func (s songsDo) MostPlayed(uid int, limit int) (result []*model.Songs, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	params = append(params, limit)
	generateSQL.WriteString("SELECT songs .*, albums.name, artists.name, interactions.liked, interactions.play_count FROM songs LEFT JOIN interactions ON interactions.song_id = songs .id AND interactions.user_id = ? JOIN albums ON songs .album_id = albums.id JOIN artists ON songs .artist_id = artists.id WHERE interactions.play_count > 0 ORDER BY interactions.play_count DESC LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// RecentlyPlayed SELECT @@table .* FROM @@table
// LEFT JOIN interactions ON interactions.song_id = songs.id WHERE interactions.user_id = @uid
// ORDER BY interactions.last_played_at DESC LIMIT @limit
func (s songsDo) RecentlyPlayed(uid int, limit int) (result []*model.Songs, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	params = append(params, limit)
	generateSQL.WriteString("SELECT songs .* FROM songs LEFT JOIN interactions ON interactions.song_id = songs.id WHERE interactions.user_id = ? ORDER BY interactions.last_played_at DESC LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// RecentlyAdded SELECT @@table .* FROM @@table LEFT JOIN interactions ON interactions.song_id = songs.id WHERE interactions.user_id = @uid
// ORDER BY songs.created_at DESC LIMIT @limit
func (s songsDo) RecentlyAdded(uid int, limit int) (result []*model.Songs, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	params = append(params, limit)
	generateSQL.WriteString("SELECT songs .* FROM songs LEFT JOIN interactions ON interactions.song_id = songs.id WHERE interactions.user_id = ? ORDER BY songs.created_at DESC LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s songsDo) Debug() ISongsDo {
	return s.withDO(s.DO.Debug())
}

func (s songsDo) WithContext(ctx context.Context) ISongsDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s songsDo) ReadDB() ISongsDo {
	return s.Clauses(dbresolver.Read)
}

func (s songsDo) WriteDB() ISongsDo {
	return s.Clauses(dbresolver.Write)
}

func (s songsDo) Session(config *gorm.Session) ISongsDo {
	return s.withDO(s.DO.Session(config))
}

func (s songsDo) Clauses(conds ...clause.Expression) ISongsDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s songsDo) Returning(value interface{}, columns ...string) ISongsDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s songsDo) Not(conds ...gen.Condition) ISongsDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s songsDo) Or(conds ...gen.Condition) ISongsDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s songsDo) Select(conds ...field.Expr) ISongsDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s songsDo) Where(conds ...gen.Condition) ISongsDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s songsDo) Order(conds ...field.Expr) ISongsDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s songsDo) Distinct(cols ...field.Expr) ISongsDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s songsDo) Omit(cols ...field.Expr) ISongsDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s songsDo) Join(table schema.Tabler, on ...field.Expr) ISongsDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s songsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISongsDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s songsDo) RightJoin(table schema.Tabler, on ...field.Expr) ISongsDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s songsDo) Group(cols ...field.Expr) ISongsDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s songsDo) Having(conds ...gen.Condition) ISongsDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s songsDo) Limit(limit int) ISongsDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s songsDo) Offset(offset int) ISongsDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s songsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISongsDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s songsDo) Unscoped() ISongsDo {
	return s.withDO(s.DO.Unscoped())
}

func (s songsDo) Create(values ...*model.Songs) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s songsDo) CreateInBatches(values []*model.Songs, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s songsDo) Save(values ...*model.Songs) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s songsDo) First() (*model.Songs, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songs), nil
	}
}

func (s songsDo) Take() (*model.Songs, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songs), nil
	}
}

func (s songsDo) Last() (*model.Songs, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songs), nil
	}
}

func (s songsDo) Find() ([]*model.Songs, error) {
	result, err := s.DO.Find()
	return result.([]*model.Songs), err
}

func (s songsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Songs, err error) {
	buf := make([]*model.Songs, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s songsDo) FindInBatches(result *[]*model.Songs, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s songsDo) Attrs(attrs ...field.AssignExpr) ISongsDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s songsDo) Assign(attrs ...field.AssignExpr) ISongsDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s songsDo) Joins(fields ...field.RelationField) ISongsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s songsDo) Preload(fields ...field.RelationField) ISongsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s songsDo) FirstOrInit() (*model.Songs, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songs), nil
	}
}

func (s songsDo) FirstOrCreate() (*model.Songs, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Songs), nil
	}
}

func (s songsDo) FindByPage(offset int, limit int) (result []*model.Songs, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s songsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s songsDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s songsDo) Delete(models ...*model.Songs) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *songsDo) withDO(do gen.Dao) *songsDo {
	s.DO = *do.(*gen.DO)
	return s
}
