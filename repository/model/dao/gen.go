// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	Album               *album
	Artist              *artist
	PersonalAccessToken *personalAccessToken
	Playlist            *playlist
	PlaylistSong        *playlistSong
	QueueState          *queueState
	Setting             *setting
	Song                *song
	User                *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Album = &Q.Album
	Artist = &Q.Artist
	PersonalAccessToken = &Q.PersonalAccessToken
	Playlist = &Q.Playlist
	PlaylistSong = &Q.PlaylistSong
	QueueState = &Q.QueueState
	Setting = &Q.Setting
	Song = &Q.Song
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		Album:               newAlbum(db, opts...),
		Artist:              newArtist(db, opts...),
		PersonalAccessToken: newPersonalAccessToken(db, opts...),
		Playlist:            newPlaylist(db, opts...),
		PlaylistSong:        newPlaylistSong(db, opts...),
		QueueState:          newQueueState(db, opts...),
		Setting:             newSetting(db, opts...),
		Song:                newSong(db, opts...),
		User:                newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Album               album
	Artist              artist
	PersonalAccessToken personalAccessToken
	Playlist            playlist
	PlaylistSong        playlistSong
	QueueState          queueState
	Setting             setting
	Song                song
	User                user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		Album:               q.Album.clone(db),
		Artist:              q.Artist.clone(db),
		PersonalAccessToken: q.PersonalAccessToken.clone(db),
		Playlist:            q.Playlist.clone(db),
		PlaylistSong:        q.PlaylistSong.clone(db),
		QueueState:          q.QueueState.clone(db),
		Setting:             q.Setting.clone(db),
		Song:                q.Song.clone(db),
		User:                q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		Album:               q.Album.replaceDB(db),
		Artist:              q.Artist.replaceDB(db),
		PersonalAccessToken: q.PersonalAccessToken.replaceDB(db),
		Playlist:            q.Playlist.replaceDB(db),
		PlaylistSong:        q.PlaylistSong.replaceDB(db),
		QueueState:          q.QueueState.replaceDB(db),
		Setting:             q.Setting.replaceDB(db),
		Song:                q.Song.replaceDB(db),
		User:                q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Album               IAlbumDo
	Artist              IArtistDo
	PersonalAccessToken IPersonalAccessTokenDo
	Playlist            IPlaylistDo
	PlaylistSong        IPlaylistSongDo
	QueueState          IQueueStateDo
	Setting             ISettingDo
	Song                ISongDo
	User                IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Album:               q.Album.WithContext(ctx),
		Artist:              q.Artist.WithContext(ctx),
		PersonalAccessToken: q.PersonalAccessToken.WithContext(ctx),
		Playlist:            q.Playlist.WithContext(ctx),
		PlaylistSong:        q.PlaylistSong.WithContext(ctx),
		QueueState:          q.QueueState.WithContext(ctx),
		Setting:             q.Setting.WithContext(ctx),
		Song:                q.Song.WithContext(ctx),
		User:                q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
