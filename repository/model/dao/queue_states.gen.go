// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/mitsuha/stork/repository/model"
)

func newQueueState(db *gorm.DB, opts ...gen.DOOption) queueState {
	_queueState := queueState{}

	_queueState.queueStateDo.UseDB(db, opts...)
	_queueState.queueStateDo.UseModel(&model.QueueState{})

	tableName := _queueState.queueStateDo.TableName()
	_queueState.ALL = field.NewAsterisk(tableName)
	_queueState.ID = field.NewInt(tableName, "id")
	_queueState.UserID = field.NewInt(tableName, "user_id")
	_queueState.SongIds = field.NewField(tableName, "song_ids")
	_queueState.CurrentSongID = field.NewString(tableName, "current_song_id")
	_queueState.PlaybackPosition = field.NewInt(tableName, "playback_position")
	_queueState.CreatedAt = field.NewTime(tableName, "created_at")
	_queueState.UpdatedAt = field.NewTime(tableName, "updated_at")

	_queueState.fillFieldMap()

	return _queueState
}

type queueState struct {
	queueStateDo queueStateDo

	ALL              field.Asterisk
	ID               field.Int
	UserID           field.Int
	SongIds          field.Field
	CurrentSongID    field.String
	PlaybackPosition field.Int
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (q queueState) Table(newTableName string) *queueState {
	q.queueStateDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q queueState) As(alias string) *queueState {
	q.queueStateDo.DO = *(q.queueStateDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *queueState) updateTableName(table string) *queueState {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt(table, "id")
	q.UserID = field.NewInt(table, "user_id")
	q.SongIds = field.NewField(table, "song_ids")
	q.CurrentSongID = field.NewString(table, "current_song_id")
	q.PlaybackPosition = field.NewInt(table, "playback_position")
	q.CreatedAt = field.NewTime(table, "created_at")
	q.UpdatedAt = field.NewTime(table, "updated_at")

	q.fillFieldMap()

	return q
}

func (q *queueState) WithContext(ctx context.Context) IQueueStateDo {
	return q.queueStateDo.WithContext(ctx)
}

func (q queueState) TableName() string { return q.queueStateDo.TableName() }

func (q queueState) Alias() string { return q.queueStateDo.Alias() }

func (q queueState) Columns(cols ...field.Expr) gen.Columns { return q.queueStateDo.Columns(cols...) }

func (q *queueState) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *queueState) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 7)
	q.fieldMap["id"] = q.ID
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["song_ids"] = q.SongIds
	q.fieldMap["current_song_id"] = q.CurrentSongID
	q.fieldMap["playback_position"] = q.PlaybackPosition
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["updated_at"] = q.UpdatedAt
}

func (q queueState) clone(db *gorm.DB) queueState {
	q.queueStateDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q queueState) replaceDB(db *gorm.DB) queueState {
	q.queueStateDo.ReplaceDB(db)
	return q
}

type queueStateDo struct{ gen.DO }

type IQueueStateDo interface {
	gen.SubQuery
	Debug() IQueueStateDo
	WithContext(ctx context.Context) IQueueStateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQueueStateDo
	WriteDB() IQueueStateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQueueStateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQueueStateDo
	Not(conds ...gen.Condition) IQueueStateDo
	Or(conds ...gen.Condition) IQueueStateDo
	Select(conds ...field.Expr) IQueueStateDo
	Where(conds ...gen.Condition) IQueueStateDo
	Order(conds ...field.Expr) IQueueStateDo
	Distinct(cols ...field.Expr) IQueueStateDo
	Omit(cols ...field.Expr) IQueueStateDo
	Join(table schema.Tabler, on ...field.Expr) IQueueStateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQueueStateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQueueStateDo
	Group(cols ...field.Expr) IQueueStateDo
	Having(conds ...gen.Condition) IQueueStateDo
	Limit(limit int) IQueueStateDo
	Offset(offset int) IQueueStateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQueueStateDo
	Unscoped() IQueueStateDo
	Create(values ...*model.QueueState) error
	CreateInBatches(values []*model.QueueState, batchSize int) error
	Save(values ...*model.QueueState) error
	First() (*model.QueueState, error)
	Take() (*model.QueueState, error)
	Last() (*model.QueueState, error)
	Find() ([]*model.QueueState, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QueueState, err error)
	FindInBatches(result *[]*model.QueueState, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QueueState) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQueueStateDo
	Assign(attrs ...field.AssignExpr) IQueueStateDo
	Joins(fields ...field.RelationField) IQueueStateDo
	Preload(fields ...field.RelationField) IQueueStateDo
	FirstOrInit() (*model.QueueState, error)
	FirstOrCreate() (*model.QueueState, error)
	FindByPage(offset int, limit int) (result []*model.QueueState, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQueueStateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindAll() (result []*model.QueueState, err error)
	FindByID(id int) (result *model.QueueState, err error)
	WhereUser(uid int) (result *model.QueueState, err error)
}

// FindAll SELECT * FROM @@table
func (q queueStateDo) FindAll() (result []*model.QueueState, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM queue_states ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// FindByID SELECT * FROM @@table WHERE id = @id
func (q queueStateDo) FindByID(id int) (result *model.QueueState, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM queue_states WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// WhereUser SELECT * FROM @@table WHERE user_id = @uid
func (q queueStateDo) WhereUser(uid int) (result *model.QueueState, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	generateSQL.WriteString("SELECT * FROM queue_states WHERE user_id = ? ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (q queueStateDo) Debug() IQueueStateDo {
	return q.withDO(q.DO.Debug())
}

func (q queueStateDo) WithContext(ctx context.Context) IQueueStateDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q queueStateDo) ReadDB() IQueueStateDo {
	return q.Clauses(dbresolver.Read)
}

func (q queueStateDo) WriteDB() IQueueStateDo {
	return q.Clauses(dbresolver.Write)
}

func (q queueStateDo) Session(config *gorm.Session) IQueueStateDo {
	return q.withDO(q.DO.Session(config))
}

func (q queueStateDo) Clauses(conds ...clause.Expression) IQueueStateDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q queueStateDo) Returning(value interface{}, columns ...string) IQueueStateDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q queueStateDo) Not(conds ...gen.Condition) IQueueStateDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q queueStateDo) Or(conds ...gen.Condition) IQueueStateDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q queueStateDo) Select(conds ...field.Expr) IQueueStateDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q queueStateDo) Where(conds ...gen.Condition) IQueueStateDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q queueStateDo) Order(conds ...field.Expr) IQueueStateDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q queueStateDo) Distinct(cols ...field.Expr) IQueueStateDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q queueStateDo) Omit(cols ...field.Expr) IQueueStateDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q queueStateDo) Join(table schema.Tabler, on ...field.Expr) IQueueStateDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q queueStateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQueueStateDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q queueStateDo) RightJoin(table schema.Tabler, on ...field.Expr) IQueueStateDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q queueStateDo) Group(cols ...field.Expr) IQueueStateDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q queueStateDo) Having(conds ...gen.Condition) IQueueStateDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q queueStateDo) Limit(limit int) IQueueStateDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q queueStateDo) Offset(offset int) IQueueStateDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q queueStateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQueueStateDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q queueStateDo) Unscoped() IQueueStateDo {
	return q.withDO(q.DO.Unscoped())
}

func (q queueStateDo) Create(values ...*model.QueueState) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q queueStateDo) CreateInBatches(values []*model.QueueState, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q queueStateDo) Save(values ...*model.QueueState) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q queueStateDo) First() (*model.QueueState, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueState), nil
	}
}

func (q queueStateDo) Take() (*model.QueueState, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueState), nil
	}
}

func (q queueStateDo) Last() (*model.QueueState, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueState), nil
	}
}

func (q queueStateDo) Find() ([]*model.QueueState, error) {
	result, err := q.DO.Find()
	return result.([]*model.QueueState), err
}

func (q queueStateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QueueState, err error) {
	buf := make([]*model.QueueState, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q queueStateDo) FindInBatches(result *[]*model.QueueState, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q queueStateDo) Attrs(attrs ...field.AssignExpr) IQueueStateDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q queueStateDo) Assign(attrs ...field.AssignExpr) IQueueStateDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q queueStateDo) Joins(fields ...field.RelationField) IQueueStateDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q queueStateDo) Preload(fields ...field.RelationField) IQueueStateDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q queueStateDo) FirstOrInit() (*model.QueueState, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueState), nil
	}
}

func (q queueStateDo) FirstOrCreate() (*model.QueueState, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueState), nil
	}
}

func (q queueStateDo) FindByPage(offset int, limit int) (result []*model.QueueState, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q queueStateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q queueStateDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q queueStateDo) Delete(models ...*model.QueueState) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *queueStateDo) withDO(do gen.Dao) *queueStateDo {
	q.DO = *do.(*gen.DO)
	return q
}
