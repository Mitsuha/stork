// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/mitsuha/stork/repository/model"
)

func newPlaylistSong(db *gorm.DB, opts ...gen.DOOption) playlistSong {
	_playlistSong := playlistSong{}

	_playlistSong.playlistSongDo.UseDB(db, opts...)
	_playlistSong.playlistSongDo.UseModel(&model.PlaylistSong{})

	tableName := _playlistSong.playlistSongDo.TableName()
	_playlistSong.ALL = field.NewAsterisk(tableName)
	_playlistSong.ID = field.NewInt(tableName, "id")
	_playlistSong.PlaylistID = field.NewInt(tableName, "playlist_id")
	_playlistSong.SongID = field.NewString(tableName, "song_id")

	_playlistSong.fillFieldMap()

	return _playlistSong
}

type playlistSong struct {
	playlistSongDo playlistSongDo

	ALL        field.Asterisk
	ID         field.Int
	PlaylistID field.Int
	SongID     field.String

	fieldMap map[string]field.Expr
}

func (p playlistSong) Table(newTableName string) *playlistSong {
	p.playlistSongDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p playlistSong) As(alias string) *playlistSong {
	p.playlistSongDo.DO = *(p.playlistSongDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *playlistSong) updateTableName(table string) *playlistSong {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.PlaylistID = field.NewInt(table, "playlist_id")
	p.SongID = field.NewString(table, "song_id")

	p.fillFieldMap()

	return p
}

func (p *playlistSong) WithContext(ctx context.Context) IPlaylistSongDo {
	return p.playlistSongDo.WithContext(ctx)
}

func (p playlistSong) TableName() string { return p.playlistSongDo.TableName() }

func (p playlistSong) Alias() string { return p.playlistSongDo.Alias() }

func (p playlistSong) Columns(cols ...field.Expr) gen.Columns {
	return p.playlistSongDo.Columns(cols...)
}

func (p *playlistSong) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *playlistSong) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["id"] = p.ID
	p.fieldMap["playlist_id"] = p.PlaylistID
	p.fieldMap["song_id"] = p.SongID
}

func (p playlistSong) clone(db *gorm.DB) playlistSong {
	p.playlistSongDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p playlistSong) replaceDB(db *gorm.DB) playlistSong {
	p.playlistSongDo.ReplaceDB(db)
	return p
}

type playlistSongDo struct{ gen.DO }

type IPlaylistSongDo interface {
	gen.SubQuery
	Debug() IPlaylistSongDo
	WithContext(ctx context.Context) IPlaylistSongDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlaylistSongDo
	WriteDB() IPlaylistSongDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlaylistSongDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlaylistSongDo
	Not(conds ...gen.Condition) IPlaylistSongDo
	Or(conds ...gen.Condition) IPlaylistSongDo
	Select(conds ...field.Expr) IPlaylistSongDo
	Where(conds ...gen.Condition) IPlaylistSongDo
	Order(conds ...field.Expr) IPlaylistSongDo
	Distinct(cols ...field.Expr) IPlaylistSongDo
	Omit(cols ...field.Expr) IPlaylistSongDo
	Join(table schema.Tabler, on ...field.Expr) IPlaylistSongDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlaylistSongDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlaylistSongDo
	Group(cols ...field.Expr) IPlaylistSongDo
	Having(conds ...gen.Condition) IPlaylistSongDo
	Limit(limit int) IPlaylistSongDo
	Offset(offset int) IPlaylistSongDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlaylistSongDo
	Unscoped() IPlaylistSongDo
	Create(values ...*model.PlaylistSong) error
	CreateInBatches(values []*model.PlaylistSong, batchSize int) error
	Save(values ...*model.PlaylistSong) error
	First() (*model.PlaylistSong, error)
	Take() (*model.PlaylistSong, error)
	Last() (*model.PlaylistSong, error)
	Find() ([]*model.PlaylistSong, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlaylistSong, err error)
	FindInBatches(result *[]*model.PlaylistSong, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PlaylistSong) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlaylistSongDo
	Assign(attrs ...field.AssignExpr) IPlaylistSongDo
	Joins(fields ...field.RelationField) IPlaylistSongDo
	Preload(fields ...field.RelationField) IPlaylistSongDo
	FirstOrInit() (*model.PlaylistSong, error)
	FirstOrCreate() (*model.PlaylistSong, error)
	FindByPage(offset int, limit int) (result []*model.PlaylistSong, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlaylistSongDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindAll() (result []*model.PlaylistSong, err error)
	FindByID(id int) (result *model.PlaylistSong, err error)
	FindByUserID(uid int) (result []*model.PlaylistSong, err error)
	DeleteWherePlaylist(pid int) (rowsAffected int64, err error)
}

// FindAll SELECT * FROM @@table
func (p playlistSongDo) FindAll() (result []*model.PlaylistSong, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM playlist_song ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// FindByID SELECT * FROM @@table WHERE id = @id
func (p playlistSongDo) FindByID(id int) (result *model.PlaylistSong, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM playlist_song WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// FindByUserID SELECT * FROM @@table WHERE user_id = @uid
func (p playlistSongDo) FindByUserID(uid int) (result []*model.PlaylistSong, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	generateSQL.WriteString("SELECT * FROM playlist_song WHERE user_id = ? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DeleteWherePlaylist DELETE FROM @@table WHERE playlist_id = @pid
func (p playlistSongDo) DeleteWherePlaylist(pid int) (rowsAffected int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, pid)
	generateSQL.WriteString("DELETE FROM playlist_song WHERE playlist_id = ? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	rowsAffected = executeSQL.RowsAffected
	err = executeSQL.Error

	return
}

func (p playlistSongDo) Debug() IPlaylistSongDo {
	return p.withDO(p.DO.Debug())
}

func (p playlistSongDo) WithContext(ctx context.Context) IPlaylistSongDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p playlistSongDo) ReadDB() IPlaylistSongDo {
	return p.Clauses(dbresolver.Read)
}

func (p playlistSongDo) WriteDB() IPlaylistSongDo {
	return p.Clauses(dbresolver.Write)
}

func (p playlistSongDo) Session(config *gorm.Session) IPlaylistSongDo {
	return p.withDO(p.DO.Session(config))
}

func (p playlistSongDo) Clauses(conds ...clause.Expression) IPlaylistSongDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p playlistSongDo) Returning(value interface{}, columns ...string) IPlaylistSongDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p playlistSongDo) Not(conds ...gen.Condition) IPlaylistSongDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p playlistSongDo) Or(conds ...gen.Condition) IPlaylistSongDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p playlistSongDo) Select(conds ...field.Expr) IPlaylistSongDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p playlistSongDo) Where(conds ...gen.Condition) IPlaylistSongDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p playlistSongDo) Order(conds ...field.Expr) IPlaylistSongDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p playlistSongDo) Distinct(cols ...field.Expr) IPlaylistSongDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p playlistSongDo) Omit(cols ...field.Expr) IPlaylistSongDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p playlistSongDo) Join(table schema.Tabler, on ...field.Expr) IPlaylistSongDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p playlistSongDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlaylistSongDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p playlistSongDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlaylistSongDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p playlistSongDo) Group(cols ...field.Expr) IPlaylistSongDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p playlistSongDo) Having(conds ...gen.Condition) IPlaylistSongDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p playlistSongDo) Limit(limit int) IPlaylistSongDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p playlistSongDo) Offset(offset int) IPlaylistSongDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p playlistSongDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlaylistSongDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p playlistSongDo) Unscoped() IPlaylistSongDo {
	return p.withDO(p.DO.Unscoped())
}

func (p playlistSongDo) Create(values ...*model.PlaylistSong) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p playlistSongDo) CreateInBatches(values []*model.PlaylistSong, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p playlistSongDo) Save(values ...*model.PlaylistSong) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p playlistSongDo) First() (*model.PlaylistSong, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlaylistSong), nil
	}
}

func (p playlistSongDo) Take() (*model.PlaylistSong, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlaylistSong), nil
	}
}

func (p playlistSongDo) Last() (*model.PlaylistSong, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlaylistSong), nil
	}
}

func (p playlistSongDo) Find() ([]*model.PlaylistSong, error) {
	result, err := p.DO.Find()
	return result.([]*model.PlaylistSong), err
}

func (p playlistSongDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlaylistSong, err error) {
	buf := make([]*model.PlaylistSong, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p playlistSongDo) FindInBatches(result *[]*model.PlaylistSong, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p playlistSongDo) Attrs(attrs ...field.AssignExpr) IPlaylistSongDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p playlistSongDo) Assign(attrs ...field.AssignExpr) IPlaylistSongDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p playlistSongDo) Joins(fields ...field.RelationField) IPlaylistSongDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p playlistSongDo) Preload(fields ...field.RelationField) IPlaylistSongDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p playlistSongDo) FirstOrInit() (*model.PlaylistSong, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlaylistSong), nil
	}
}

func (p playlistSongDo) FirstOrCreate() (*model.PlaylistSong, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlaylistSong), nil
	}
}

func (p playlistSongDo) FindByPage(offset int, limit int) (result []*model.PlaylistSong, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p playlistSongDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p playlistSongDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p playlistSongDo) Delete(models ...*model.PlaylistSong) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *playlistSongDo) withDO(do gen.Dao) *playlistSongDo {
	p.DO = *do.(*gen.DO)
	return p
}
