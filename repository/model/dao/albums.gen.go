// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/mitsuha/stork/repository/model"
)

func newAlbum(db *gorm.DB, opts ...gen.DOOption) album {
	_album := album{}

	_album.albumDo.UseDB(db, opts...)
	_album.albumDo.UseModel(&model.Album{})

	tableName := _album.albumDo.TableName()
	_album.ALL = field.NewAsterisk(tableName)
	_album.ID = field.NewInt(tableName, "id")
	_album.ArtistID = field.NewInt(tableName, "artist_id")
	_album.Name = field.NewString(tableName, "name")
	_album.Cover = field.NewString(tableName, "cover")
	_album.CreatedAt = field.NewTime(tableName, "created_at")
	_album.UpdatedAt = field.NewTime(tableName, "updated_at")
	_album.Artist = albumBelongsToArtist{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Artist", "model.Artist"),
	}

	_album.fillFieldMap()

	return _album
}

type album struct {
	albumDo albumDo

	ALL       field.Asterisk
	ID        field.Int
	ArtistID  field.Int
	Name      field.String
	Cover     field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	Artist    albumBelongsToArtist

	fieldMap map[string]field.Expr
}

func (a album) Table(newTableName string) *album {
	a.albumDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a album) As(alias string) *album {
	a.albumDo.DO = *(a.albumDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *album) updateTableName(table string) *album {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt(table, "id")
	a.ArtistID = field.NewInt(table, "artist_id")
	a.Name = field.NewString(table, "name")
	a.Cover = field.NewString(table, "cover")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *album) WithContext(ctx context.Context) IAlbumDo { return a.albumDo.WithContext(ctx) }

func (a album) TableName() string { return a.albumDo.TableName() }

func (a album) Alias() string { return a.albumDo.Alias() }

func (a album) Columns(cols ...field.Expr) gen.Columns { return a.albumDo.Columns(cols...) }

func (a *album) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *album) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["artist_id"] = a.ArtistID
	a.fieldMap["name"] = a.Name
	a.fieldMap["cover"] = a.Cover
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt

}

func (a album) clone(db *gorm.DB) album {
	a.albumDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a album) replaceDB(db *gorm.DB) album {
	a.albumDo.ReplaceDB(db)
	return a
}

type albumBelongsToArtist struct {
	db *gorm.DB

	field.RelationField
}

func (a albumBelongsToArtist) Where(conds ...field.Expr) *albumBelongsToArtist {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a albumBelongsToArtist) WithContext(ctx context.Context) *albumBelongsToArtist {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a albumBelongsToArtist) Session(session *gorm.Session) *albumBelongsToArtist {
	a.db = a.db.Session(session)
	return &a
}

func (a albumBelongsToArtist) Model(m *model.Album) *albumBelongsToArtistTx {
	return &albumBelongsToArtistTx{a.db.Model(m).Association(a.Name())}
}

type albumBelongsToArtistTx struct{ tx *gorm.Association }

func (a albumBelongsToArtistTx) Find() (result *model.Artist, err error) {
	return result, a.tx.Find(&result)
}

func (a albumBelongsToArtistTx) Append(values ...*model.Artist) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a albumBelongsToArtistTx) Replace(values ...*model.Artist) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a albumBelongsToArtistTx) Delete(values ...*model.Artist) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a albumBelongsToArtistTx) Clear() error {
	return a.tx.Clear()
}

func (a albumBelongsToArtistTx) Count() int64 {
	return a.tx.Count()
}

type albumDo struct{ gen.DO }

type IAlbumDo interface {
	gen.SubQuery
	Debug() IAlbumDo
	WithContext(ctx context.Context) IAlbumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlbumDo
	WriteDB() IAlbumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlbumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlbumDo
	Not(conds ...gen.Condition) IAlbumDo
	Or(conds ...gen.Condition) IAlbumDo
	Select(conds ...field.Expr) IAlbumDo
	Where(conds ...gen.Condition) IAlbumDo
	Order(conds ...field.Expr) IAlbumDo
	Distinct(cols ...field.Expr) IAlbumDo
	Omit(cols ...field.Expr) IAlbumDo
	Join(table schema.Tabler, on ...field.Expr) IAlbumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlbumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlbumDo
	Group(cols ...field.Expr) IAlbumDo
	Having(conds ...gen.Condition) IAlbumDo
	Limit(limit int) IAlbumDo
	Offset(offset int) IAlbumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlbumDo
	Unscoped() IAlbumDo
	Create(values ...*model.Album) error
	CreateInBatches(values []*model.Album, batchSize int) error
	Save(values ...*model.Album) error
	First() (*model.Album, error)
	Take() (*model.Album, error)
	Last() (*model.Album, error)
	Find() ([]*model.Album, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Album, err error)
	FindInBatches(result *[]*model.Album, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Album) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlbumDo
	Assign(attrs ...field.AssignExpr) IAlbumDo
	Joins(fields ...field.RelationField) IAlbumDo
	Preload(fields ...field.RelationField) IAlbumDo
	FirstOrInit() (*model.Album, error)
	FirstOrCreate() (*model.Album, error)
	FindByPage(offset int, limit int) (result []*model.Album, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlbumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindAll() (result []*model.Album, err error)
	FindByID(id int) (result *model.Album, err error)
	FindByUserID(uid int) (result []*model.Album, err error)
	MostPlayed(uid int, limit int) (result []*model.Album, err error)
	RecentlyAdded(limit int) (result []*model.Album, err error)
}

// FindAll SELECT * FROM @@table
func (a albumDo) FindAll() (result []*model.Album, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM albums ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// FindByID SELECT * FROM @@table WHERE id = @id
func (a albumDo) FindByID(id int) (result *model.Album, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM albums WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// FindByUserID SELECT * FROM @@table WHERE user_id = @uid
func (a albumDo) FindByUserID(uid int) (result []*model.Album, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	generateSQL.WriteString("SELECT * FROM albums WHERE user_id = ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// MostPlayed SELECT @@table .*
//
//	FROM @@table
//	LEFT JOIN songs ON @@table .id = songs.album_id
//	LEFT JOIN interactions ON songs.id = interactions.song_id AND interactions.user_id = @uid
//	ORDER BY interactions.play_count DESC
//	LIMIT @limit
func (a albumDo) MostPlayed(uid int, limit int) (result []*model.Album, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	params = append(params, limit)
	generateSQL.WriteString("SELECT albums .* FROM albums LEFT JOIN songs ON albums .id = songs.album_id LEFT JOIN interactions ON songs.id = interactions.song_id AND interactions.user_id = ? ORDER BY interactions.play_count DESC LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// RecentlyAdded SELECT * FROM @@table WHERE id != 0 ORDER BY created_at DESC LIMIT @limit
func (a albumDo) RecentlyAdded(limit int) (result []*model.Album, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	generateSQL.WriteString("SELECT * FROM albums WHERE id != 0 ORDER BY created_at DESC LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a albumDo) Debug() IAlbumDo {
	return a.withDO(a.DO.Debug())
}

func (a albumDo) WithContext(ctx context.Context) IAlbumDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a albumDo) ReadDB() IAlbumDo {
	return a.Clauses(dbresolver.Read)
}

func (a albumDo) WriteDB() IAlbumDo {
	return a.Clauses(dbresolver.Write)
}

func (a albumDo) Session(config *gorm.Session) IAlbumDo {
	return a.withDO(a.DO.Session(config))
}

func (a albumDo) Clauses(conds ...clause.Expression) IAlbumDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a albumDo) Returning(value interface{}, columns ...string) IAlbumDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a albumDo) Not(conds ...gen.Condition) IAlbumDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a albumDo) Or(conds ...gen.Condition) IAlbumDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a albumDo) Select(conds ...field.Expr) IAlbumDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a albumDo) Where(conds ...gen.Condition) IAlbumDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a albumDo) Order(conds ...field.Expr) IAlbumDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a albumDo) Distinct(cols ...field.Expr) IAlbumDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a albumDo) Omit(cols ...field.Expr) IAlbumDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a albumDo) Join(table schema.Tabler, on ...field.Expr) IAlbumDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a albumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlbumDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a albumDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlbumDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a albumDo) Group(cols ...field.Expr) IAlbumDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a albumDo) Having(conds ...gen.Condition) IAlbumDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a albumDo) Limit(limit int) IAlbumDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a albumDo) Offset(offset int) IAlbumDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a albumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlbumDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a albumDo) Unscoped() IAlbumDo {
	return a.withDO(a.DO.Unscoped())
}

func (a albumDo) Create(values ...*model.Album) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a albumDo) CreateInBatches(values []*model.Album, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a albumDo) Save(values ...*model.Album) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a albumDo) First() (*model.Album, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Album), nil
	}
}

func (a albumDo) Take() (*model.Album, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Album), nil
	}
}

func (a albumDo) Last() (*model.Album, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Album), nil
	}
}

func (a albumDo) Find() ([]*model.Album, error) {
	result, err := a.DO.Find()
	return result.([]*model.Album), err
}

func (a albumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Album, err error) {
	buf := make([]*model.Album, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a albumDo) FindInBatches(result *[]*model.Album, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a albumDo) Attrs(attrs ...field.AssignExpr) IAlbumDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a albumDo) Assign(attrs ...field.AssignExpr) IAlbumDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a albumDo) Joins(fields ...field.RelationField) IAlbumDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a albumDo) Preload(fields ...field.RelationField) IAlbumDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a albumDo) FirstOrInit() (*model.Album, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Album), nil
	}
}

func (a albumDo) FirstOrCreate() (*model.Album, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Album), nil
	}
}

func (a albumDo) FindByPage(offset int, limit int) (result []*model.Album, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a albumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a albumDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a albumDo) Delete(models ...*model.Album) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *albumDo) withDO(do gen.Dao) *albumDo {
	a.DO = *do.(*gen.DO)
	return a
}
